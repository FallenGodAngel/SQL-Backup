using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Sql;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using Grpc.Core;
using Microsoft.SqlServer.Management.Common;
using Microsoft.SqlServer.Management.Smo;
using Server = Microsoft.SqlServer.Management.Smo.Server;

namespace Remote_PR_Backup_SQL_DataBase
{
    public partial class Form1 : Form
    {
        SqlConnection con = new SqlConnection("The connection ");
        public Form1()
        {
            InitializeComponent();
        }


        private void btnBackup_Click(object sender, EventArgs e)
        {
            progressBar.Value = 0;
            try
            {
                
                Server dbServer = new Server( new ServerConnection(txtServer.Text, txtUsername.Text, txtPassword.Text));
                Backup dbBackup= new Backup() { Action=BackupActionType.Database,Database=txtDatabase.Text};
                dbBackup.Devices.AddDevice(@"C:\location\sql.bak", DeviceType.File);

                dbBackup.Initialize = true;
                dbBackup.PercentComplete += DbBackup_PercentComplete;
                dbBackup.Complete += DbBackup_Complete;
                dbBackup.SqlBackupAsync(dbServer);


            }
            catch (Exception ex) 
            {
                MessageBox.Show(ex.Message, "Message", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            

        }

        private void DbBackup_Complete(object sender, ServerMessageEventArgs e)
        {
            if (e.Error != null)
            {
                lblStatus.Invoke((MethodInvoker)delegate
                { 
                lblStatus.Text = e.Error.Message;
            });
            }
        }
        private void DbBackup_PercentComplete(object sender, PercentCompleteEventArgs e)
        {
            progressBar.Invoke((MethodInvoker)delegate
            {
                progressBar.Value = e.Percent;
                progressBar.Update();
            });
            lblPercent.Invoke((MethodInvoker)delegate
            {
                lblPercent.Text = $"(e.Percent)%";
            });
            
        }

    }
}
